import { Extension } from '@roots/bud-framework';
import type { GlobalSettingsAndStyles as WPThemeJson } from '@roots/bud-preset-wordpress/theme';
import Container from '@roots/container';
import { Options, ThemeJsonWebpackPlugin } from './plugin.js';
import * as tailwind from './tailwind/index.js';
/**
 * Callback function used to configure wordpress `theme.json`
 *
 * @public
 */
export interface Mutator {
    (json: Partial<WPThemeJson['settings']> | Container<Partial<WPThemeJson['settings']>>): Partial<WPThemeJson['settings']> | Container<Partial<WPThemeJson['settings']>>;
}
/**
 * WP Theme JSON plugin adapter
 *
 * @remarks
 * Produces a WordPress `theme.json`
 *
 * @example
 * ```ts
 * bud.themeJson(theme =>
 *   theme.set('color', {})
 * )
 * ```
 *
 * @public
 * @decorator `@label`
 * @decorator `@options`
 * @decorator `@when`
 * @decorator `@plugin`
 */
export default class ThemeJson extends Extension<Options, ThemeJsonWebpackPlugin> {
    protected static tailwind: typeof tailwind;
    protected _palette: tailwind.palette.TailwindColors;
    protected get palette(): tailwind.palette.TailwindColors;
    protected set palette(palette: tailwind.palette.TailwindColors);
    protected _fontFamily: tailwind.fontFamily.TailwindFonts;
    protected get fontFamily(): tailwind.fontFamily.TailwindFonts;
    protected set fontFamily(fontFamily: tailwind.fontFamily.TailwindFonts);
    protected _fontSize: tailwind.fontSize.TailwindSize;
    protected get fontSize(): tailwind.fontSize.TailwindSize;
    protected set fontSize(fontSize: tailwind.fontSize.TailwindSize);
    protected _template: Array<{
        name: any;
        title: any;
        postTypes: any;
    }>;
    protected get template(): {
        name: any;
        title: any;
        postTypes: any;
    }[];
    protected set template(template: {
        name: any;
        title: any;
        postTypes: any;
    }[]);
    init(): Promise<void>;
    settings(input?: Mutator | Container<Partial<WPThemeJson['settings']>> | Partial<WPThemeJson['settings']> | boolean, raw?: boolean): this;
    useTailwindColors(): this;
    useTailwindFontFamily(): this;
    useTailwindFontSize(): this;
}
//# sourceMappingURL=extension.d.ts.map