var ThemeJson_1;
import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework';
import { bind, expose, label, options, plugin, when, } from '@roots/bud-framework/extension/decorators';
import Container from '@roots/container';
import { isBoolean, isFunction } from 'lodash-es';
import { ThemeJsonWebpackPlugin } from './plugin.js';
import * as tailwind from './tailwind/index.js';
/**
 * WP Theme JSON plugin adapter
 *
 * @remarks
 * Produces a WordPress `theme.json`
 *
 * @example
 * ```ts
 * bud.themeJson(theme =>
 *   theme.set('color', {})
 * )
 * ```
 *
 * @public
 * @decorator `@label`
 * @decorator `@options`
 * @decorator `@when`
 * @decorator `@plugin`
 */
let ThemeJson = ThemeJson_1 = class ThemeJson extends Extension {
    get palette() {
        return this._palette;
    }
    set palette(palette) {
        this._palette = palette;
    }
    get fontFamily() {
        return this._fontFamily;
    }
    set fontFamily(fontFamily) {
        this._fontFamily = fontFamily;
    }
    get fontSize() {
        return this._fontSize;
    }
    set fontSize(fontSize) {
        this._fontSize = fontSize;
    }
    get template() {
        return this._template;
    }
    set template(template) {
        this._template = template;
    }
    async init() {
        const config = this.app.context.disk.config['tailwind.config.js'] ??
            this.app.context.disk.config['tailwind.config.mjs'] ??
            this.app.context.disk.config['tailwind.config.cjs'];
        if (!config)
            return;
        try {
            this.palette = await ThemeJson_1.tailwind.palette.getPalette(config);
        }
        catch (error) { }
        try {
            this.fontFamily = await ThemeJson_1.tailwind.fontFamily.getFonts(config);
        }
        catch (error) { }
        try {
            this.fontSize = await ThemeJson_1.tailwind.fontSize.getFontSize(config);
        }
        catch (err) { }
    }
    settings(input, raw) {
        if (!input)
            return this;
        this.when = async () => true;
        const value = isFunction(input)
            ? input(raw
                ? this.options.settings
                : this.app.container(this.options.settings))
            : isBoolean(input)
                ? this.options.settings
                : input;
        this.setOption('settings', value instanceof Container ? value.all() : value);
        return this;
    }
    useTailwindColors() {
        this.setOption('settings', {
            ...(this.options.settings ?? {}),
            color: {
                ...(this.options.settings?.color ?? {}),
                palette: ThemeJson_1.tailwind.palette.transformPalette(this.palette),
            },
        });
        return this;
    }
    useTailwindFontFamily() {
        this.setOption('settings', {
            ...(this.options.settings ?? {}),
            typography: {
                ...(this.options.settings.typography ?? {}),
                fontFamilies: ThemeJson_1.tailwind.fontFamily.transformFonts(this.fontFamily),
            },
        });
        return this;
    }
    useTailwindFontSize() {
        this.setOption('settings', {
            ...(this.options.settings ?? {}),
            typography: {
                ...(this.options.settings.typography ?? {}),
                fontSizes: ThemeJson_1.tailwind.fontSize.transformFonts(this.fontSize),
            },
        });
        return this;
    }
};
ThemeJson.tailwind = tailwind;
__decorate([
    bind
], ThemeJson.prototype, "init", null);
__decorate([
    bind
], ThemeJson.prototype, "settings", null);
__decorate([
    bind
], ThemeJson.prototype, "useTailwindColors", null);
__decorate([
    bind
], ThemeJson.prototype, "useTailwindFontFamily", null);
__decorate([
    bind
], ThemeJson.prototype, "useTailwindFontSize", null);
ThemeJson = ThemeJson_1 = __decorate([
    label('@roots/sage/wp-theme-json'),
    options({
        path: ({ path }) => path('./theme.json'),
        settings: {
            color: {
                custom: false,
                customGradient: false,
            },
            custom: {
                spacing: {},
                typography: { 'font-size': {}, 'line-height': {} },
            },
            spacing: {
                padding: true,
                units: ['px', '%', 'em', 'rem', 'vw', 'vh'],
            },
            typography: {
                customFontSize: false,
                dropCap: false,
            },
        },
    }),
    when(async () => false),
    plugin(ThemeJsonWebpackPlugin),
    expose('wpjson')
], ThemeJson);
export default ThemeJson;
//# sourceMappingURL=extension.js.map