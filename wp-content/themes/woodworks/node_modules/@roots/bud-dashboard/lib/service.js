import { __decorate } from "tslib";
import { Service } from '@roots/bud-framework';
import { bind } from 'helpful-decorators';
import * as logUpdate from 'log-update';
import { Line } from './render/line.js';
import { reporter } from './render/stats/index.js';
/**
 * Dashboard service
 *
 * @public
 */
export class Dashboard extends Service {
    constructor() {
        super(...arguments);
        /**
         * Progress
         *
         * @public
         */
        this.progress = new Line();
        /**
         * Current frame
         *
         * @public
         */
        this.frame = '';
    }
    /**
     * @override
     */
    render(str) {
        this.app.context.stdout.write(str);
    }
    /**
     * `register` callback
     *
     * @public
     * @decorator `@bind`
     */
    async register() {
        if (this.app.context.args.ci || this.app.env.has('JEST_WORKER_ID')) {
            return;
        }
        this.render = logUpdate.createLogUpdate(process.stdout, {
            showCursor: false,
        });
        this.interval = setInterval(this.update, 80);
        this.app.hooks.action('app.close', async () => this.interval.unref());
    }
    /**
     * Update cli
     *
     * @public
     * @decorator `@bind`
     */
    update() {
        !this.progress.isComplete &&
            this.progress.frame &&
            this.render(this.progress.frame);
        return this;
    }
    /**
     * Run dashboard
     *
     * @public
     * @decorator `@bind`
     */
    stats({ stats, errors, warnings, }) {
        this.progress.complete(true);
        this.frame = this.app.context.args.ci
            ? this.app.compiler.stats.string.trim()
            : reporter.report({ stats, errors, warnings, app: this.app });
        this.app.context.stdout.write(this.frame);
        return this;
    }
    /**
     * Progress callback
     *
     * @public
     * @decorator `@bind`
     */
    progressCallback(percent, scope) {
        try {
            this.percent = Math.ceil((percent ?? 0) * 100);
            this.progress.complete(this.percent >= 99);
            const update = scope.includes(`]`)
                ? scope.split(`]`).pop()?.trim()
                : scope;
            this.progress.update(`${this.percent}%`, update);
            this.update();
        }
        catch (error) {
            this.app.warn(error);
        }
    }
}
__decorate([
    bind
], Dashboard.prototype, "render", null);
__decorate([
    bind
], Dashboard.prototype, "register", null);
__decorate([
    bind
], Dashboard.prototype, "update", null);
__decorate([
    bind
], Dashboard.prototype, "stats", null);
__decorate([
    bind
], Dashboard.prototype, "progressCallback", null);
//# sourceMappingURL=service.js.map