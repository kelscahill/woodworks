import { Service, Services } from '@roots/bud-framework';
import type { Context } from '@roots/bud-framework/config';
/**
 * Cache service class
 *
 * @public
 */
export default class Cache extends Service implements Services.Cache.Service {
    /**
     * Enabled
     *
     * @public
     */
    enabled: boolean;
    /**
     * Type
     *
     * @public
     */
    protected _name: string;
    get name(): string;
    set name(name: string);
    /**
     * Type
     *
     * @public
     */
    protected _type: 'memory' | 'filesystem';
    get type(): 'memory' | 'filesystem';
    set type(type: 'memory' | 'filesystem');
    /**
     * version
     *
     * @public
     */
    protected _version: string;
    get version(): string;
    set version(version: string);
    /**
     * Build dependencies
     *
     * @public
     */
    get buildDependencies(): any;
    set buildDependencies(deps: Context['disk']['config']);
    /**
     * Cache directory
     *
     * @public
     */
    protected _cacheDirectory: string;
    get cacheDirectory(): string;
    set cacheDirectory(directory: string);
    /**
     * Managed paths
     *
     * @public
     */
    protected _managedPaths: Array<string>;
    get managedPaths(): Array<string>;
    set managedPaths(paths: Array<string>);
    /**
     * Webpack configuration
     *
     * @public
     */
    get configuration(): false | {
        type: "memory" | "filesystem";
    };
    /**
     * Memory cache
     *
     * @public
     */
    get memoryCache(): {
        type: "memory" | "filesystem";
    };
    /**
     * Filesystem cache
     *
     * @public
     */
    get filesystemCache(): {
        name: string;
        type: "memory" | "filesystem";
        version: string;
        cacheDirectory: string;
        managedPaths: string[];
        buildDependencies: any;
    };
    /**
     * `register` callback
     *
     * @public
     * @decorator `@bind`
     */
    register(): Promise<void>;
    /**
     * `boot` callback
     *
     * @public
     * @decorator `@bind`
     */
    boot(): Promise<void>;
    clean(): void;
}
//# sourceMappingURL=service.d.ts.map