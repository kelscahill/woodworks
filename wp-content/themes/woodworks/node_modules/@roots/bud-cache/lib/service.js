import { __decorate } from "tslib";
import { Service } from '@roots/bud-framework';
import fs from 'fs-extra';
import { bind } from 'helpful-decorators';
import { createHash } from 'node:crypto';
import InvalidateCacheExtension from './invalidate-cache-extension/index.js';
/**
 * Cache service class
 *
 * @public
 */
export default class Cache extends Service {
    constructor() {
        super(...arguments);
        /**
         * Enabled
         *
         * @public
         */
        this.enabled = true;
    }
    get name() {
        return this.app.hooks.filter('build.cache.name');
    }
    set name(name) {
        this.app.hooks.on('build.cache.name', name);
    }
    get type() {
        return this._type;
    }
    set type(type) {
        this._type = type;
    }
    get version() {
        return this._version;
    }
    set version(version) {
        this._version = version;
    }
    /**
     * Build dependencies
     *
     * @public
     */
    get buildDependencies() {
        return {
            bud: Object.values(this.app.context.disk.config),
        };
    }
    set buildDependencies(deps) {
        this.app.context.disk.config = deps;
    }
    get cacheDirectory() {
        return this._cacheDirectory;
    }
    set cacheDirectory(directory) {
        this._cacheDirectory = directory;
    }
    get managedPaths() {
        return this._managedPaths;
    }
    set managedPaths(paths) {
        this._managedPaths = paths;
    }
    /**
     * Webpack configuration
     *
     * @public
     */
    get configuration() {
        if (this.enabled === false)
            return this.enabled;
        return this.type === 'memory' ? this.memoryCache : this.filesystemCache;
    }
    /**
     * Memory cache
     *
     * @public
     */
    get memoryCache() {
        return {
            type: this.type,
        };
    }
    /**
     * Filesystem cache
     *
     * @public
     */
    get filesystemCache() {
        return {
            name: this.name,
            type: this.type,
            version: this.version,
            cacheDirectory: this.cacheDirectory,
            managedPaths: this.managedPaths,
            buildDependencies: this.buildDependencies,
        };
    }
    /**
     * `register` callback
     *
     * @public
     * @decorator `@bind`
     */
    async register() {
        await this.app.extensions.add(InvalidateCacheExtension);
    }
    /**
     * `boot` callback
     *
     * @public
     * @decorator `@bind`
     */
    async boot() {
        this.type = 'filesystem';
        this.cacheDirectory = this.app.path(`@storage/cache/webpack`);
        this.managedPaths = [this.app.path(`@modules`)];
        this.name = `${this.app.name}.${this.app.mode}`;
        const args = Object.entries(this.app.context.args)
            .filter(([k, v]) => v !== undefined)
            .map(([k, v]) => `${k}-${v}`)
            .join(`.`);
        this.version = createHash(`sha1`)
            .update(this.app.json.stringify([this.app.context.disk.config, args]))
            .digest(`base64`)
            .replace(/[^a-z0-9]/gi, `_`)
            .toLowerCase();
    }
    clean() {
        fs.removeSync(this.app.path(`@storage/cache`));
    }
}
__decorate([
    bind
], Cache.prototype, "register", null);
__decorate([
    bind
], Cache.prototype, "boot", null);
__decorate([
    bind
], Cache.prototype, "clean", null);
//# sourceMappingURL=service.js.map