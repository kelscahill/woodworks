import { __decorate } from "tslib";
import { bind } from 'helpful-decorators';
import Signale from 'signale';
import { types } from './logger.constants.js';
/**
 * Logger service
 *
 * @public
 */
export class Logger {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app) {
        this._app = () => _app;
        this.instance = this.makeInstance();
    }
    get app() {
        return this._app();
    }
    get level() {
        if (!this.app.context.args.log)
            return "error" /* LEVEL.ERROR */;
        if (!this.app.context.args.verbose)
            return "timer" /* LEVEL.STANDARD */;
        return "log" /* LEVEL.VERBOSE */;
    }
    get interactive() {
        return this.level === "error" /* LEVEL.ERROR */;
    }
    makeInstance(constructorOverrides = {}, configOverrides = {}) {
        let instance = new Signale.Signale({
            interactive: this.interactive,
            // secrets: [this.app.context.dir, this.app.context.cwd],
            logLevel: this.level,
            types: types(this.app),
            scope: this.app.name ?? this.app.context.application.label,
            ...constructorOverrides,
        });
        instance.config({
            displayScope: true,
            displayBadge: true,
            displayDate: false,
            displayFilename: false,
            displayLabel: false,
            displayTimestamp: false,
            underlineLabel: false,
            underlineMessage: false,
            underlinePrefix: false,
            underlineSuffix: false,
            uppercaseLabel: false,
            ...configOverrides,
        });
        return instance.scope(`${this.app.context.application.label}@${this.app.context.application.version}`, this.app.name);
    }
}
__decorate([
    bind
], Logger.prototype, "makeInstance", null);
//# sourceMappingURL=index.js.map