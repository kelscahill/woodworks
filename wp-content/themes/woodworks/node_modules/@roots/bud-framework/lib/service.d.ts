import Container from '@roots/container';
import type { Bud } from './bud.js';
/**
 * Service
 *
 * @remarks
 * The Service interface provides access to the {@link Bud} container.
 *
 * A Service interfaces with the Framework through a series of callbacks at different points in the build.
 *
 * @public
 */
export declare class Service {
    /**
     * @internal @readonly
     */
    _app: () => Bud;
    /**
     * After config callback
     * @public
     */
    afterConfig?(app: Bud): Promise<unknown>;
    /**
     * Access {@link Bud}
     *
     * @public @readonly
     */
    get app(): Bud;
    /**
     * Class constructor
     * @public
     */
    constructor(app: Bud);
    /**
     * Lifecycle method: bootstrap
     *
     * @remarks
     * `bootstrap` is called when the Service is instantiated (but before all services are guaranteed to be instantiated).
     *
     * @virtual @public
     */
    bootstrap?(app: Bud): Promise<any>;
    /**
     * Lifecycle method: bootstrapped
     *
     * @remarks
     * Called once all Service instances are available
  
     *
     * @virtual @public
     */
    bootstrapped?(app: Bud): Promise<any>;
    /**
     * Lifecycle method: register
     *
     * @remarks
     * Intended for Service instances to register functionalities, modules,
     * and bind functions to {@link Bud}
     *
     * @virtual @public
     */
    register?(app: Bud): Promise<any>;
    /**
     * Lifecycle method: registered
     *
     * @remarks
     * `registered` is called after `register` is complete
  
     *
     * @virtual @public
     */
    registered?(app: Bud): Promise<any>;
    /**
     * Lifecycle method: boot
     *
     * @remarks
     * `boot` is called once all services are registered.
  
     *
     * @virtual @public
     */
    boot?(app: Bud): Promise<any>;
    /**
     * Lifecycle method: booted
     *
     * @remarks
     * `booted` is called after `boot`
  
     *
     * @virtual @public
     */
    booted?(app: Bud): Promise<any>;
}
/**
 * Container service
 *
 * @public
 */
export declare class ContainerService<T = any> extends Container<T> {
    /**
     * @readonly @internal
     */
    _app: () => Bud;
    /**
     * Access {@link Bud}
     * @public @readonly
     */
    get app(): Bud;
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app: Bud);
    /**
     * Lifecycle method: bootstrap
     *
     * @remarks
     * `bootstrap` is called when the Service is instantiated (but before all services are guaranteed to be instantiated).
     *
     * @virtual @public
     */
    bootstrap?(app: Bud): Promise<any>;
    /**
     * Lifecycle method: bootstrapped
     *
     * @remarks
     * Called once all Service instances are available
     *
     * @virtual @public
     */
    bootstrapped?(app: Bud): Promise<any>;
    /**
     * Lifecycle method: register
     *
     * @remarks
     * Method for Service instances to register functionalities, modules,
     * and bind functions to {@link Bud}
     *
     * @virtual @public
     */
    register?(app: Bud): Promise<any>;
    /**
     * Lifecycle method: registered
     *
     * @remarks
     * `registered` is called after `register` callback is processed
     *
     * @virtual @public
     */
    registered?(app: Bud): Promise<any>;
    /**
     * Lifecycle method: boot
     *
     * @remarks
     * `boot` is called once all services are registered.
     *
     * @virtual @public
     */
    boot?(app: Bud): Promise<any>;
    /**
     * Lifecycle method: booted
     *
     * @remarks
     * `booted` is called after `boot` callback is processed
  
     *
     * @virtual @public
     */
    booted?(app: Bud): Promise<any>;
}
//# sourceMappingURL=service.d.ts.map