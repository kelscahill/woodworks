import { __decorate } from "tslib";
import { bind } from 'helpful-decorators';
import { omit } from 'lodash-es';
import { format } from 'pretty-format';
import { lifecycle } from './lifecycle/index.js';
import * as parsers from './parsers/index.js';
/**
 * Framework abstract
 *
 * @public
 */
export class Bud {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(implementation) {
        this.implementation = implementation;
        this.json = parsers.json5;
        this.yml = parsers.yml;
        /**
         * timer util
         *
         * @public
         */
        this._hrtime = process.hrtime();
        this.lifecycle = lifecycle.bind(this);
    }
    /**
     * Compilation mode
     *
     * @remarks
     * Either `production` or `development`.
     *
     * @readonly
     * @defaultValue `production`
     * @public
     */
    get mode() {
        return this.options.mode;
    }
    /**
     * Name
     *
     * @readonly
     * @public
     */
    get name() {
        return this.options.name;
    }
    /**
     * Parent {@link Bud} instance
     *
     * @readonly
     * @public
     */
    get root() {
        return this.options.root ?? this;
    }
    /**
     * True when {@link Bud.mode} is `production`
     *
     * @public
     */
    get isProduction() {
        return this.mode === 'production';
    }
    /**
     * True when {@link Bud.mode} is `development`
     *
     * @public
     */
    get isDevelopment() {
        return this.mode === 'development';
    }
    /**
     * True when current instance is the parent instance
     *
     * @readonly
     * @public
     */
    get isRoot() {
        return this.root.name === this.name;
    }
    /**
     * True when current instance is a child instance
     *
     * @readonly
     * @public
     */
    get isChild() {
        return this.root.name !== this.name;
    }
    /**
     * True when child compilers
     *
     * @readonly
     * @public
     */
    get hasChildren() {
        return Object.values(this.children).length > 0;
    }
    /**
     * Factory
     *
     * @public
     */
    async factory(options) {
        return await new this.implementation(this.implementation).lifecycle({
            ...this.options,
            ...(options ?? {}),
            context: { ...this.context },
        });
    }
    /**
     * Log a message
     *
     * @public
     * @decorator `@bind`
     */
    log(...messages) {
        this.logger?.instance && this.logger.instance.log(...messages);
        return this;
    }
    /**
     * Log an `info` level message
     *
     * @public
     * @decorator `@bind`
     */
    info(...messages) {
        this.logger?.instance && this.logger.instance.info(...messages);
        return this;
    }
    /**
     * Log a `success` level message
     *
     * @public
     * @decorator `@bind`
     */
    success(...messages) {
        this.logger?.instance && this.logger.instance.success(...messages);
        return this;
    }
    /**
     * Log a `warning` level message
     *
     * @public
     * @decorator `@bind`
     */
    warn(...messages) {
        this.logger?.instance && this.logger.instance.warn(...messages);
        return this;
    }
    /**
     * Log a `warning` level message
     *
     * @public
     * @decorator `@bind`
     */
    await(...messages) {
        this.logger?.instance && this.logger.instance.await(...messages);
        return this;
    }
    /**
     * Log a `warning` level message
     *
     * @public
     * @decorator `@bind`
     */
    complete(...messages) {
        this.logger?.instance && this.logger.instance.complete(...messages);
        return this;
    }
    /**
     * Log and display a debug message.
     *
     * @public
     * @decorator `@bind`
     */
    debug(...messages) {
        // eslint-disable-next-line no-console
        this.context.stdout.write(format(messages, {
            callToJSON: false,
            maxDepth: 8,
            printFunctionName: false,
            escapeString: false,
        }));
    }
    /**
     * Log and display an error.
     *
     * @remarks
     * In `production` this error is treated as fatal
     * and will kill the process.
     *
     * @public
     * @decorator `@bind`
     */
    error(...messages) {
        this.logger.instance.error(...messages);
        if (this.isProduction) {
            this.close();
        }
    }
    /**
     * Dump object and return Bud
     */
    dump(obj, options) {
        if (!this.context.args.verbose)
            return;
        const prettyFormatOptions = omit(options, [
            'prefix',
            'language',
            'ignoreIllegals',
        ]);
        this.context.stdout.write(format(obj, {
            callToJSON: false,
            maxDepth: 8,
            printFunctionName: false,
            escapeString: false,
            ...prettyFormatOptions,
        }));
        return this;
    }
    /**
     * timer diff
     *
     * @public
     * @decorator `@bind`
     */
    _hrdiff() {
        const diff = process.hrtime(this._hrtime);
        return diff[0] * 1000 + diff[1] / 1000000;
    }
}
__decorate([
    bind
], Bud.prototype, "log", null);
__decorate([
    bind
], Bud.prototype, "info", null);
__decorate([
    bind
], Bud.prototype, "success", null);
__decorate([
    bind
], Bud.prototype, "warn", null);
__decorate([
    bind
], Bud.prototype, "await", null);
__decorate([
    bind
], Bud.prototype, "complete", null);
__decorate([
    bind
], Bud.prototype, "debug", null);
__decorate([
    bind
], Bud.prototype, "error", null);
__decorate([
    bind
], Bud.prototype, "dump", null);
__decorate([
    bind
], Bud.prototype, "_hrdiff", null);
//# sourceMappingURL=bud.js.map