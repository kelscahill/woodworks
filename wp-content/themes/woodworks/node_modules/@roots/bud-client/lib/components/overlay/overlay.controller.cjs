"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Controller = void 0;
const stripAnsi = require("strip-ansi");
/**
 * Overlay controller
 * @public
 */
class Controller {
    /**
     * Class constructor
     *
     * @public
     */
    constructor() {
        this.update = this.update.bind(this);
        this.element = document.createElement('bud-error');
    }
    /**
     * Formatted error message
     * @public
     */
    get message() {
        var _a;
        return (_a = this.payload.errors) === null || _a === void 0 ? void 0 : _a.reduce((a, c) => {
            var _a, _b;
            return `${a}
        <div>
          <span>${(_a = c === null || c === void 0 ? void 0 : c.title) !== null && _a !== void 0 ? _a : 'Compilation error'}</span>
          <pre>${(_b = stripAnsi.default(c === null || c === void 0 ? void 0 : c.message)) !== null && _b !== void 0 ? _b : ''}</pre>
        </div>`;
        }, ``);
    }
    /**
     * Append `bud-error` element to the DOM
     *
     * @public
     */
    createError() {
        var _a;
        !document.body.querySelector('bud-error') &&
            ((_a = document.body) === null || _a === void 0 ? void 0 : _a.appendChild(this.element));
    }
    /**
     * Remove `bud-error` element from the DOM (if present)
     *
     * @public
     */
    removeError() {
        var _a;
        (_a = document.body.querySelector('bud-error')) === null || _a === void 0 ? void 0 : _a.remove();
    }
    /**
     * Update DOM
     *
     * @public
     */
    update(payload) {
        var _a, _b;
        this.payload = payload;
        this.element.setAttribute('message', (_a = this.message) !== null && _a !== void 0 ? _a : ``);
        if ((_b = this.payload.errors) === null || _b === void 0 ? void 0 : _b.length) {
            return this.createError();
        }
        this.removeError();
    }
}
exports.Controller = Controller;
//# sourceMappingURL=overlay.controller.cjs.map