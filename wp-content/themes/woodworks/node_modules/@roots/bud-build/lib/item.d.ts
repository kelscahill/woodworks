import type { Bud, Build } from '@roots/bud-framework';
import Base from './shared/base.js';
export declare type ConstructorOptions = Build.Item.ConstructorOptions;
/**
 * Item class
 *
 * @public
 */
declare class Item extends Base implements Build.Item {
    /**
     * Loader
     *
     * @public
     */
    loader: Build.Item['loader'];
    /**
     * Loader options
     *
     * @public
     */
    options: Build.Item['options'];
    /**
     * Class constructor
     *
     * @param options - {@link Build.Item.Options}
     */
    constructor(_app: () => Bud, options?: {
        loader?: Item['loader'];
        options?: Item['options'];
    });
    /**
     * Get rule set item loader
     *
     * @public
     * @decorator `@bind`
     */
    getLoader(): Build.Loader;
    /**
     * Set rule set item loader
     *
     * @public
     * @decorator `@bind`
     */
    setLoader(loader: Build.Item['loader']): this;
    /**
     * Get rule set item options
     *
     * @public
     * @decorator `@bind`
     */
    getOptions(): Item['options'];
    /**
     * Set rule set item options
     *
     * @public
     * @decorator `@bind`
     */
    setOptions(options: Item['options']): this;
    /**
     * Merge rule set item options
     *
     * @public
     * @decorator `@bind`
     */
    mergeOptions(options: Build.Item.Options): this;
    /**
     * Produce rule set item object for Webpack
     *
     * @public
     * @decorator `@bind`
     */
    toWebpack(): Build.Item.Output;
}
export { Item as default };
//# sourceMappingURL=item.d.ts.map