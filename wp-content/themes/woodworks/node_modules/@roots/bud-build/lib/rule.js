import { __decorate } from "tslib";
import { bind } from 'helpful-decorators';
import { isFunction, isString } from 'lodash-es';
import Base from './shared/base.js';
/**
 * Bud Rule
 *
 * @public
 */
export default class Rule extends Base {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app, options) {
        super(_app);
        this._app = _app;
        if (!options)
            return;
        options.test && this.setTest(options.test);
        options.use && this.setUse(options.use);
        options.include && this.setInclude(options.include);
        options.exclude && this.setExclude(options.exclude);
        options.type && this.setType(options.type);
        options.parser && this.setParser(options.parser);
        options.generator && this.setGenerator(options.generator);
    }
    /**
     * Test value
     *
     * @param app - Bud instance
     *
     * @public
     * @decorator `@bind`
     */
    getTest() {
        return this.unwrap(this.test);
    }
    /**
     * Set test value
     *
     * @public
     * @decorator `@bind`
     */
    setTest(test) {
        this.test = this.wrap(test);
        return this;
    }
    /**
     * Get parser value
     *
     * @public
     * @decorator `@bind`
     */
    getParser() {
        return this.unwrap(this.parser);
    }
    /**
     * Set parser value
     *
     * @public
     * @decorator `@bind`
     */
    setParser(parser) {
        this.parser = this.wrap(parser);
        return this;
    }
    /**
     * Get use value
     *
     * @public
     * @decorator `@bind`
     */
    getUse() {
        return this.unwrap(this.use)?.filter(isString) ?? [];
    }
    /**
     * Set use value
     *
     * @public
     * @decorator `@bind`
     */
    setUse(input) {
        this.use = isFunction(input)
            ? input(this.getUse() ?? [], this.app)
            : input;
        return this;
    }
    /**
     * Get include value
     *
     * @public
     * @decorator `@bind`
     */
    getInclude() {
        return this.include.map(this.unwrap);
    }
    /**
     * Set include value
     *
     * @public
     * @decorator `@bind`
     */
    setInclude(includes) {
        if (!this.include)
            this.include = [];
        if (typeof includes === 'function')
            this.include = includes(this.include);
        else
            this.include = includes;
        return this;
    }
    /**
     * Get exclude value
     *
     * @public
     * @decorator `@bind`
     */
    getExclude() {
        return this.exclude.map(this.unwrap);
    }
    /**
     * Set exclude value
     *
     * @public
     * @decorator `@bind`
     */
    setExclude(excludes) {
        if (!this.exclude)
            this.exclude = [];
        if (typeof excludes === 'function')
            this.exclude = excludes(this.exclude);
        else
            this.exclude = excludes;
        return this;
    }
    /**
     * Get type value
     *
     * @public
     * @decorator `@bind`
     */
    getType() {
        return this.unwrap(this.type);
    }
    /**
     * Set type value
     *
     * @public
     * @decorator `@bind`
     */
    setType(type) {
        this.type = this.wrap(type);
        return this;
    }
    /**
     * Get generator value
     *
     * @public
     * @decorator `@bind`
     */
    getGenerator() {
        return this.unwrap(this.generator);
    }
    /**
     * Set generator value
     *
     * @public
     * @decorator `@bind`
     */
    setGenerator(generator) {
        this.generator = this.wrap(generator);
        return this;
    }
    /**
     * Produce final Base output
     *
     * @param app - {@link @roots/bud-framework#Bud}
     * @returns finalized rule
     *
     * @public
     * @decorator `@bind`
     */
    toWebpack() {
        const output = { test: this.getTest() };
        this.include && Object.assign(output, { include: this.getInclude() });
        this.exclude && Object.assign(output, { exclude: this.getExclude() });
        this.type && Object.assign(output, { type: this.getType() });
        this.parser && Object.assign(output, { parser: this.getParser() });
        this.generator &&
            Object.assign(output, { generator: this.getGenerator() });
        this.use &&
            Object.assign(output, {
                use: this.getUse()
                    .map(item => this.app.build.items[item])
                    .map(item => item.toWebpack()),
            });
        return output;
    }
}
__decorate([
    bind
], Rule.prototype, "getTest", null);
__decorate([
    bind
], Rule.prototype, "setTest", null);
__decorate([
    bind
], Rule.prototype, "getParser", null);
__decorate([
    bind
], Rule.prototype, "setParser", null);
__decorate([
    bind
], Rule.prototype, "getUse", null);
__decorate([
    bind
], Rule.prototype, "setUse", null);
__decorate([
    bind
], Rule.prototype, "getInclude", null);
__decorate([
    bind
], Rule.prototype, "setInclude", null);
__decorate([
    bind
], Rule.prototype, "getExclude", null);
__decorate([
    bind
], Rule.prototype, "setExclude", null);
__decorate([
    bind
], Rule.prototype, "getType", null);
__decorate([
    bind
], Rule.prototype, "setType", null);
__decorate([
    bind
], Rule.prototype, "getGenerator", null);
__decorate([
    bind
], Rule.prototype, "setGenerator", null);
__decorate([
    bind
], Rule.prototype, "toWebpack", null);
//# sourceMappingURL=rule.js.map