import type * as Bud from '@roots/bud-framework';
import { Service } from '@roots/bud-framework/service';
import type { Configuration } from 'webpack';
import Item from './item.js';
import Loader from './loader.js';
import Rule from './rule.js';
/**
 * Webpack configuration builder class
 *
 * @public
 */
export default class Build extends Service implements Bud.Build.Service {
    /**
     * @public
     */
    config: Partial<Configuration>;
    /**
     * Registered loaders
     *
     * @public
     */
    loaders: Bud.Build.Loaders;
    /**
     * Registered rules
     *
     * @public
     */
    rules: Bud.Build.Rules;
    /**
     * Registered items
     *
     * @public
     */
    items: Bud.Build.Items;
    /**
     * Make webpack configuration
     *
     * @public
     * @decorator `@bind`
     */
    make(): Promise<Configuration>;
    /**
     * Service register event
     *
     * @remarks
     * `loaders`, `items`, and `rules` are instantiated dumbly
     * because it is painful to think about how to map the typings..
     *
     * @public
     * @decorator `@bind`
     */
    register(): Promise<void>;
    /**
     * Set Rule
     *
     * @param name - Rule key
     * @param options - Rule constructor properties
     * @returns the Rule
     *
     * @public
     * @decorator `@bind`
     */
    setRule(name: string, options?: Bud.Build.Rule.Options): this;
    /**
     * Make Rule
     *
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeRule(options?: Bud.Build.Rule.Options): Rule;
    /**
     * Set Loader
     *
     * @param name - Loader key
     * @param options - Loader constructor properties
     * @returns the Loader
     *
     * @public
     * @decorator `@bind`
     */
    setLoader(name: string, options: string): this;
    /**
     * Make Loader
     *
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeLoader(options: string): Loader;
    /**
     * Set Item
     *
     * @param name - Item key
     * @param options - Item constructor properties
     * @returns the Item
     *
     * @public
     * @decorator `@bind`
     */
    setItem(name: string, options: ((item: Bud.Build.Item) => Bud.Build.Item) | Bud.Build.Item.ConstructorOptions): this;
    /**
     * Make Item
     *
     * @param options - rule constructor properties
     * @returns the rule
     *
     * @public
     * @decorator `@bind`
     */
    makeItem(options?: Partial<Item['options']>): Item;
}
//# sourceMappingURL=service.d.ts.map