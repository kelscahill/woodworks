import type { Bud, Build } from '@roots/bud-framework';
import Base from './shared/base.js';
export declare type ConstructorOptions = Partial<Build.Rule.Options>;
/**
 * Bud Rule
 *
 * @public
 */
export default class Rule extends Base implements Build.Rule {
    protected _app: () => Bud;
    /**
     * Rule test
     *
     * @public
     */
    test: Build.Rule['test'];
    /**
     * {@inheritDoc @roots/bud-framework#Rule.Abstract.use}
     *
     * @public
     */
    use?: Array<keyof Build.Items & string>;
    /**
     * Include paths
     */
    include?: Build.Rule['include'];
    /**
     * {@inheritDoc @roots/bud-framework#Rule.Abstract.exclude}
     *
     * @public
     */
    exclude?: Build.Rule['exclude'];
    /**
     * {@inheritDoc @roots/bud-framework#Rule.Abstract."type"}
     *
     * @public
     */
    type?: Build.Rule['type'];
    /**
     * Generator factory
     *
     * @public
     */
    parser?: Build.Rule['parser'];
    /**
     * Generator factory
     *
     * @public
     */
    generator?: Build.Rule['generator'];
    /**
     * Class constructor
     *
     * @public
     */
    constructor(_app: () => Bud, options?: Build.Rule.Options);
    /**
     * Test value
     *
     * @param app - Bud instance
     *
     * @public
     * @decorator `@bind`
     */
    getTest(): RegExp;
    /**
     * Set test value
     *
     * @public
     * @decorator `@bind`
     */
    setTest(test: Rule['test']): this;
    /**
     * Get parser value
     *
     * @public
     * @decorator `@bind`
     */
    getParser(): Build.Rule.Parser;
    /**
     * Set parser value
     *
     * @public
     * @decorator `@bind`
     */
    setParser(parser: Build.Rule['parser']): this;
    /**
     * Get use value
     *
     * @public
     * @decorator `@bind`
     */
    getUse(): Array<`${`${keyof Build.Items & string}`}`>;
    /**
     * Set use value
     *
     * @public
     * @decorator `@bind`
     */
    setUse(input: Array<keyof Build.Items & string> | ((use: Array<keyof Build.Items & string>, app: Bud) => Array<keyof Build.Items & string>)): this;
    /**
     * Get include value
     *
     * @public
     * @decorator `@bind`
     */
    getInclude(): Rule['include'];
    /**
     * Set include value
     *
     * @public
     * @decorator `@bind`
     */
    setInclude(includes: ((includes: Rule['include']) => Rule['include']) | Rule['include']): this;
    /**
     * Get exclude value
     *
     * @public
     * @decorator `@bind`
     */
    getExclude(): Rule['exclude'];
    /**
     * Set exclude value
     *
     * @public
     * @decorator `@bind`
     */
    setExclude(excludes: ((excludes: Rule['exclude']) => Rule['exclude']) | Rule['exclude']): this;
    /**
     * Get type value
     *
     * @public
     * @decorator `@bind`
     */
    getType(): string;
    /**
     * Set type value
     *
     * @public
     * @decorator `@bind`
     */
    setType(type: any): this;
    /**
     * Get generator value
     *
     * @public
     * @decorator `@bind`
     */
    getGenerator(): any;
    /**
     * Set generator value
     *
     * @public
     * @decorator `@bind`
     */
    setGenerator(generator: Build.Rule['generator']): this;
    /**
     * Produce final Base output
     *
     * @param app - {@link @roots/bud-framework#Bud}
     * @returns finalized rule
     *
     * @public
     * @decorator `@bind`
     */
    toWebpack(): Build.Rule.Output;
}
//# sourceMappingURL=rule.d.ts.map