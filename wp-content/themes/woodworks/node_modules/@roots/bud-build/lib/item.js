import { __decorate } from "tslib";
import { bind } from 'helpful-decorators';
import Base from './shared/base.js';
/**
 * Item class
 *
 * @public
 */
class Item extends Base {
    /**
     * Class constructor
     *
     * @param options - {@link Build.Item.Options}
     */
    constructor(_app, options) {
        super(_app);
        options?.loader && this.setLoader(options.loader);
        options?.options && this.setOptions(options.options);
    }
    /**
     * Get rule set item loader
     *
     * @public
     * @decorator `@bind`
     */
    getLoader() {
        return this.app.build.loaders[this.unwrap(this.loader)];
    }
    /**
     * Set rule set item loader
     *
     * @public
     * @decorator `@bind`
     */
    setLoader(loader) {
        this.loader = loader;
        return this;
    }
    /**
     * Get rule set item options
     *
     * @public
     * @decorator `@bind`
     */
    getOptions() {
        return this.unwrap(this.options);
    }
    /**
     * Set rule set item options
     *
     * @public
     * @decorator `@bind`
     */
    setOptions(options) {
        this.options = this.wrap(options);
        return this;
    }
    /**
     * Merge rule set item options
     *
     * @public
     * @decorator `@bind`
     */
    mergeOptions(options) {
        options = {
            ...(this.getOptions() ?? {}),
            ...options,
        };
        this.setOptions(options);
        return this;
    }
    /**
     * Produce rule set item object for Webpack
     *
     * @public
     * @decorator `@bind`
     */
    toWebpack() {
        const loader = this.getLoader();
        if (!loader)
            this.app.error(loader, `missing`, this);
        const output = {
            loader: this.getLoader().getSrc(),
        };
        if (this.options) {
            output.options = this.getOptions();
        }
        return output;
    }
}
__decorate([
    bind
], Item.prototype, "getLoader", null);
__decorate([
    bind
], Item.prototype, "setLoader", null);
__decorate([
    bind
], Item.prototype, "getOptions", null);
__decorate([
    bind
], Item.prototype, "setOptions", null);
__decorate([
    bind
], Item.prototype, "mergeOptions", null);
__decorate([
    bind
], Item.prototype, "toWebpack", null);
export { Item as default };
//# sourceMappingURL=item.js.map