import type { Compiler as Contract } from '@roots/bud-framework';
import { Service } from '@roots/bud-framework';
import type { Configuration, MultiStats, Stats, StatsCompilation, WebpackError } from 'webpack';
import Webpack from 'webpack';
import type BudError from './Reporter/BudError.js';
/**
 * Wepback compilation controller class
 *
 * @public
 */
export declare class Compiler extends Service implements Contract.Service {
    /**
     * Compiler implementation
     *
     * @internal
     */
    protected _implementation: Contract.Implementation;
    /**
     * Compiler implementation
     *
     * @public
     */
    get implementation(): Contract.Implementation;
    set implementation(implementation: Contract.Implementation);
    /**
     * Compiler instance
     *
     * @public
     */
    compilation: Contract.Service['compilation'];
    /**
     * Compilation stats
     *
     * @public
     */
    stats: {
        json: StatsCompilation;
        string: string;
    };
    /**
     * Errors
     *
     * @public
     */
    errors: Array<BudError>;
    /**
     * Warnings
     *
     * @public
     */
    warnings: Array<BudError>;
    /**
     * Multi-compiler configuration
     *
     * @public
     */
    config: Array<Configuration>;
    done: boolean;
    compiling: boolean;
    /**
     * Initiates compilation
     *
     * @returns the compiler instance
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    compile(): Promise<Webpack.MultiCompiler>;
    /**
     * Invoke compiler
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    invoke(config: Array<Configuration>): Promise<Contract.Service['compilation']>;
    /**
     * Returns final webpack configuration
     *
     * @public
     * @decorator `@bind`
     */
    before(): Promise<Configuration[]>;
    /**
     * Webpack callback
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    callback(error: Error, stats: Stats & MultiStats): void;
    /**
     * Stats handler
     *
     * @public
     * @decorator `@bind`
     */
    handleStats(stats: Stats & MultiStats): void;
    /**
     * Compiler close event
     *
     * @public
     * @decorator `@bind`
     */
    onClose(error: WebpackError): void;
    /**
     * Compiler error event
     *
     * @public
     * @decorator `@bind`
     */
    onError(error: BudError[] | Error): void;
}
//# sourceMappingURL=compiler.service.d.ts.map