import { __decorate } from "tslib";
import { bind, once } from 'helpful-decorators';
import { join } from 'node:path';
import { NotificationCenter, } from 'node-notifier';
import open from 'open';
import openEditor from 'open-editor';
/**
 * Notifier
 *
 * @public
 */
export class Notifier {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(app) {
        this.app = app;
        this.notificationCenter = new NotificationCenter({
            customPath: this.binary,
        });
    }
    /**
     * Binary path
     *
     * @public
     */
    get binary() {
        return join(this.app.context.application.dir, 'vendor', 'mac.no-index', 'roots-notifier.app', 'Contents', 'MacOS', 'roots-notifier');
    }
    /**
     * Get user editor from env
     *
     * @public
     */
    get editor() {
        if (this.app.env.has('VISUAL'))
            return this.app.env.get('VISUAL');
        if (this.app.env.get('EDITOR'))
            return this.app.env.get('EDITOR');
    }
    /**
     * Notice title
     *
     * @public
     */
    get title() {
        return this.app.compiler.errors?.length > 0
            ? `✖ ${this.group}`
            : `✔ ${this.group}`;
    }
    /**
     * Notice group
     *
     * @public
     */
    get group() {
        return this.app.name ?? this.app.context.application.name;
    }
    /**
     * Notice message
     * @public
     */
    get message() {
        return [
            `${this.app.mode} build completed`,
            this.app.compiler.errors?.length || this.app.compiler.warnings.length
                ? `with`
                : ``,
            this.app.compiler.errors?.length
                ? `${this.app.compiler.errors.length} errors`
                : null,
            this.app.compiler.errors?.length && this.app.compiler.warnings.length
                ? `and`
                : ``,
            this.app.compiler.warnings?.length
                ? `${this.app.compiler.warnings.length} warnings`
                : null,
        ]
            .filter(Boolean)
            .join(' ');
    }
    /**
     * Open URL
     *
     * @public
     */
    get open() {
        if (this.app.isProduction)
            return;
        return this.app.server.connection.url.toString();
    }
    /**
     * Open browser in development
     *
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    async openBrowser() {
        if (this.app.isProduction)
            return;
        return await open(this.open);
    }
    /**
     * Open editor on error
     *
     * @public
     * @decorator `@bind`
     */
    openEditor(errors) {
        if (!this.editor) {
            return this.app.warn(`Can't open problem file(s) in editor\n`, `The --editor flag was used but there is no editor indicated by either $EDITOR or $VISUAL environmental variables\n`, '$VISUAL will be preferred over $EDITOR if both are present');
        }
        openEditor(errors.map(error => {
            if (!error.file)
                return;
            return {
                file: this.app.path(error.file),
                line: error.line ?? 0,
                column: error.column ?? 0,
            };
        }), { editor: this.editor });
    }
    /**
     * Notifications
     *
     * @public
     * @decorator `@bind`
     */
    async notify() {
        this.app.info('cli', 'notify');
        try {
            if (this.app.compiler.errors.length && this.app.context.args.editor)
                this.openEditor(this.app.compiler.errors);
        }
        catch (err) {
            this.app.warn(err);
        }
        try {
            if (this.app.context.args.browser &&
                !this.app.compiler.errors.length)
                await this.openBrowser();
        }
        catch (err) {
            this.app.warn(err);
        }
        try {
            this.app.context.args.notify &&
                this.notificationCenter.notify({
                    title: this.title,
                    message: this.message,
                    // @ts-ignore
                    group: this.group,
                    open: this.open,
                }, this.callback);
        }
        catch (err) {
            this.app.warn(err);
        }
    }
    /**
     * node notifier callback
     *
     * @public
     * @decorator `@bind`
     */
    async callback(error, response, metadata) { }
}
__decorate([
    bind,
    once
], Notifier.prototype, "openBrowser", null);
__decorate([
    bind
], Notifier.prototype, "openEditor", null);
__decorate([
    bind
], Notifier.prototype, "notify", null);
__decorate([
    bind
], Notifier.prototype, "callback", null);
//# sourceMappingURL=index.js.map