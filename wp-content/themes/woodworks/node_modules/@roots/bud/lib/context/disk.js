import { globby } from 'globby';
/**
 * Context: disk
 *
 * @public
 */
export class Disk {
    /**
     * Class constructor
     *
     * @public
     */
    constructor(config = {}) {
        this.config = config;
    }
    /**
     * Find configs
     *
     * @public
     */
    async findConfigs(dir) {
        const search = await globby([
            `*.json`,
            `*.yml`,
            `*.toml`,
            `*.ts`,
            `*.js`,
            `*.mjs`,
            `*.cjs`,
            `*config*`,
            `*rc`,
            `*lint*`,
            `package.json`,
            `config/*.{ts,js,json,yml}`,
            `!node_modules/**/*`,
        ], {
            absolute: true,
            cwd: dir,
            dot: true,
            gitignore: true,
            onlyFiles: true,
        });
        this.config = search.reduce((configs, filePath) => ({
            ...configs,
            [`${filePath.replace(`${dir}/`, '')}`]: filePath,
        }), this.config);
        return this;
    }
}
//# sourceMappingURL=disk.js.map