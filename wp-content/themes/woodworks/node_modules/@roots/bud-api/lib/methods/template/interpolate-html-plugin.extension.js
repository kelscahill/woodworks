import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, label } from '@roots/bud-framework/extension/decorators';
import HtmlWebpackPlugin from 'html-webpack-plugin';
import { InterpolateHtmlPlugin } from './interpolate-html-plugin.plugin.js';
/**
 * BudInterpolateHTMLPlugin
 *
 * @public
 * @decorator `@label`
 */
let BudInterpolateHtmlPlugin = class BudInterpolateHtmlPlugin extends Extension {
    /**
     * public env accessor
     *
     * @public
     */
    get publicEnv() {
        return this.app.env.getPublicEnv() ?? {};
    }
    /**
     * `afterConfig` callback
     *
     * @public
     * @decorator `@bind`
     */
    async afterConfig() {
        Object.entries(this.app.env.getPublicEnv()).map(([key, value]) => {
            this.setOption(key, value);
        });
    }
    /**
     * `make` callback
     *
     * @public
     * @decorator `@bind`
     */
    async make() {
        return new InterpolateHtmlPlugin(HtmlWebpackPlugin, this.options);
    }
    /**
     * `when` callback
     *
     * @public
     * @decorator `@bind`
     */
    async when() {
        return this.options ? true : false;
    }
};
__decorate([
    bind
], BudInterpolateHtmlPlugin.prototype, "afterConfig", null);
__decorate([
    bind
], BudInterpolateHtmlPlugin.prototype, "make", null);
__decorate([
    bind
], BudInterpolateHtmlPlugin.prototype, "when", null);
BudInterpolateHtmlPlugin = __decorate([
    label('interpolate-html-plugin')
], BudInterpolateHtmlPlugin);
export default BudInterpolateHtmlPlugin;
//# sourceMappingURL=interpolate-html-plugin.extension.js.map