import type { Server as Base } from '@roots/bud-framework';
import { Service } from '@roots/bud-framework/service';
import type { Connection } from '@roots/bud-framework/services/server';
import Express from 'express';
import * as middlewareMap from '../middleware/index.js';
import { Watcher } from './server.watcher.js';
/**
 * Server service class
 * @public
 */
export declare class Server extends Service implements Base.Service {
    /**
     * Express instance
     * @public
     */
    application: Express.Application;
    /**
     * Express instance
     * @public
     */
    express: typeof Express;
    /**
     * Watcher instance
     * @public
     */
    watcher: Watcher;
    /**
     * Server connections
     * @public
     */
    connection: Connection;
    /**
     * Available middleware
     * @public
     */
    availableMiddleware: typeof middlewareMap;
    /**
     * Utilized middleware
     * @public
     */
    get enabledMiddleware(): Base.Service['enabledMiddleware'];
    /**
     * Applied middleware
     * @public
     */
    appliedMiddleware: Partial<Record<keyof Base.Middleware.Available, any>>;
    /**
     * Register service
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    register(): Promise<void>;
    /**
     * Boot service
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    boot(): Promise<void>;
    /**
     * Set connection
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    setConnection(): Promise<void>;
    /**
     * Inject scripts
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    injectScripts(): Promise<void>;
    /**
     * Apply middleware
     * @public
     * @decorator `@bind`
     * @decorator `@once`
     */
    applyMiddleware(): Promise<void>;
    /**
     * Run development server
     * @public
     * @decorator `@bind`
     */
    run(): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map