import { __decorate } from "tslib";
import chokidar from 'chokidar';
import { globby } from 'globby';
import { bind } from 'helpful-decorators';
/**
 * FS Watcher
 *
 * @public
 */
export class Watcher {
    /**
     * Class constructor
     *
     * @param app - Application instance
     */
    constructor(app) {
        this.app = app;
    }
    /**
     * Get watch options
     *
     * @public
     * @decorator `@bind`
     */
    getOptions() {
        this.options = this.app.hooks.filter('dev.watch.options', {});
        return this.options;
    }
    /**
     * Get watched files
     *
     * @public
     * @decorator `@bind`
     */
    getFiles() {
        this.files = this.app.hooks.filter('dev.watch.files');
        if (!this.files || this.files.size === 0)
            return [];
        return Array.from(this.files);
    }
    /**
     * Get files
     *
     * @public
     * @decorator `@bind`
     */
    async search() {
        return await globby(this.getFiles());
    }
    /**
     * Watcher callback
     *
     * @param path - changed file
     *
     * @public
     * @decorator `@bind`
     */
    watcherCallback(path) {
        this.logger.log('edit to', path.replace(this.app.path(), '.'), 'triggered reload');
        this.app.server.appliedMiddleware?.hot?.publish({
            action: 'reload',
            message: `Detected file change: ${path}. Reloading window.`,
        });
    }
    /**
     * Initialize watch files
     *
     * @public
     * @decorator `@bind`
     */
    async watch() {
        this.logger = this.app.logger.instance.scope('watch');
        this.getFiles();
        if (!this.files.size)
            return;
        this.instance = await this.search().then(files => chokidar
            .watch(files, this.getOptions())
            .on('change', this.watcherCallback));
        this.logger.log(`watching ${this.files.size} files for changes`);
        return this.instance;
    }
}
__decorate([
    bind
], Watcher.prototype, "getFiles", null);
__decorate([
    bind
], Watcher.prototype, "search", null);
__decorate([
    bind
], Watcher.prototype, "watcherCallback", null);
__decorate([
    bind
], Watcher.prototype, "watch", null);
//# sourceMappingURL=server.watcher.js.map